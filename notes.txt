1> Search in a Rotated Sorted array:-

	First of all find the pivot element(A pivot element is the one jiske just aage aur just piche dono small elements honge). 
	Once the pivot element is found now check if the target element is smaller that 0th element then the element should be present
	in between 0 to pivot-1 else the element must be between pivot+1 to n-1 else -1.

	So now perform binary search for all these two cases.

2> Minimum swaps required to sort the array:-

	Here, we don't need to apply merge sort because wo wala approach tab lgta hai jab "total steps required to sort the array" aisa
	likh ke aaye.
	
	In this question, create a vector of pairs. In pair, first element will be the arr[i] and second element will be "i".
	Now sort this vector. We will get the sorted arr with their indexes. For example.
	arr = [2, 8, 5, 4]. In vector, it will be [[2, 0], [8, 1], [5, 2], [4, 3]]. After sorting, it will become-
	[[2, 0], [4, 3], [5, 2], [8, 1]]

	Now run a for loop and do the following if v[i].second != i :-
		swap(v[i], v[v[i].second])
		i -= 1;  // ye wala isliye kiya kyuki swap krne ke baad hum wapis se check karenge ki i ke barabar hua ya nhi v[i].second
		count += 1;

3> Aggresive Cows:-

	Here we are given an array of n size which contains the position of stalls and we are also given K cows and we have to assign the
	cows to stalls such that minimum distance between any two of them is as large as possible.

	For any questions of these types use binary search:-
		Here Take min = 0; max = max(arr) - min(arr); // Array must be sorted.
		Now we will find mid.
		Until min <= max:- Do the following-
			if mid we found in above step is a valid mid then store the value of mid in answer and move min to mid+1.
				// ye isliye kiya kyuki agar cows mid distance me set ho ja rhi hai to uske aage bhi ho hi jayengi
				   aur hume max answer chahiye to hum aur aage ja rhe hain.
			else move max to mid-1;
			find mid again.
		To check whether a particular mid is a valid mid or not, do the following:-
			Take cowCount = 1 // Initially hum ek cow leke chal rhe hain aur tab tak chalenge jab tak sari cows na le len.
			initialPos = arr[0] // [1, 2, 3, 4, 6] Isme initial position arr[0] lenge aur final position ek for loop lga ke lete rahenge.
			Now use one for loop for 0 to n-1 and do the following:-
				if(arr[i]-initialPos) >= mid { //Valid Case. Mtlb mid distance pe hum cow ko place kr sakte hain
								//Agar less than mid aayega to hum place nhi kr sakte.
					cowCount++; // Ek couw ko place kr denge. Fir check krenge ki cows puri to nhi hogyi.
					if(cowcount==k) return true;
					Agar puri nhi hui cows to initialPos ko arr[i] ke equal kar ke agli cow ke liye...
			Agar pura for loop chal gya aur ans true return nhi hua to iska mtlb valid mid nhi hai. False

4